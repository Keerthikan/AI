#define LINE_THRESHOLD 50
#define CROSS_THRESHOLD 500

#define CORR_FACTOR_RIGHT   150/25
#define CORR_FACTOR_LEFT    125/25
#define SENSOR_RIGHT        S1
#define SENSOR_LEFT         S2
#define SENSOR_LINE         S3
#define MOTOR_LEFT          OUT_A
#define MOTOR_RIGHT         OUT_B
#define LEFT_LIMIT          199
#define RIGHT_LIMIT         127

#define BASE_SPEED          75
#define TURN_SPEED          50
#define STOP                0

#define DEBUG 0 //For debug display info, set to 1;

#define KP                  0.4
#define KD                  0.2
#define KI                  0.05

float sensor_right_input, sensor_left_input, sensor_line_input, sensor_diff, sensor_diff_last, test = 0;

//functions
void print_debug_info(bool debug);

void add_orientation();
void sub_orientation();

void eight();
void lefty();
bool forward();
bool left();
bool left_new();
bool right();
bool right_new();

char parse_cmd(int index, string cmd);

void state_machine();

//Variables
float corr_factor = 0;
float proportional = 0;
float derivative = 0;
float integral = 0;

int orientation = 0;

string cmd = "lluRRdulrrudd";

task main()
{
    //Sensor setup. Set sensor type and turn on light on sensor;
    SetSensorType(SENSOR_RIGHT, SENSOR_TYPE_LIGHT_ACTIVE);
    SetSensorType(SENSOR_LEFT, SENSOR_TYPE_LIGHT_ACTIVE);
    SetSensorType(SENSOR_LINE, SENSOR_TYPE_LIGHT_ACTIVE);

    SetSensorLight(SENSOR_RIGHT,true);
    SetSensorLight(SENSOR_LEFT,true);
    SetSensorLight(SENSOR_LINE,true);

    while(true)
    {
        //forward();
        eight();
        //  sensor_line_input = GetInput(SENSOR_LEFT,RawValueField);
        //  test = GetInput(SENSOR_RIGHT,RawValueField);
        // //
        //  NumOut(0,LCD_LINE2,sensor_line_input);
        //  NumOut(0,LCD_LINE3,test);
        //  NumOut(0,LCD_LINE4, test - sensor_line_input);
        //  NumOut(0,LCD_LINE5, sensor_line_input - test);

        print_debug_info(DEBUG);
    }
}

void state_machine()
{
    for(int i = 0; i < strlen(cmd); i++)
    {
        switch(cmd[i]) {
            case 'l':
                TextOut(0,LCD_LINE7,"l");
                Wait(500);
                break;
            case 'r':
                TextOut(0,LCD_LINE7,"r");
                Wait(500);
                break;
            case 'u':
                TextOut(0,LCD_LINE7,"u");
                Wait(500);
                break;
            case 'd':
                TextOut(0,LCD_LINE7,"d");
                Wait(500);
                break;
            case 'L':
                TextOut(0,LCD_LINE7,"L");
                Wait(500);
                break;
            case 'R':
                TextOut(0,LCD_LINE7,"R");
                Wait(500);
                break;
            case 'U':
                TextOut(0,LCD_LINE7,"U");
                Wait(500);
                break;
            case 'D':
                TextOut(0,LCD_LINE7,"D");
                Wait(500);
                break;
            default:
                break;
        }
    }
}

void lefty()
{
while (true) {
  forward();
  Wait(250);

  TextOut(0,LCD_LINE7,"1");
  right_new();
  Wait(250);

  TextOut(0,LCD_LINE7,"2");
  right_new();
  Wait(250);

  TextOut(0,LCD_LINE7,"3");
  right_new();
  Wait(250);

  TextOut(0,LCD_LINE7,"4");
  right_new();
  Wait(250);

  TextOut(0,LCD_LINE7,"5");
  right_new();
  Wait(250);

  forward();
  Wait(250);

  TextOut(0,LCD_LINE7,"1");
  right_new();
  Wait(250);

  TextOut(0,LCD_LINE7,"2");
  right_new();
  Wait(250);

  TextOut(0,LCD_LINE7,"3");
  right_new();
  Wait(250);

  TextOut(0,LCD_LINE7,"4");
  right_new();
  Wait(250);

  TextOut(0,LCD_LINE7,"5");
  right_new();
  Wait(250);

  forward();
  Wait(250);

  TextOut(0,LCD_LINE7,"1");
  left_new();
  Wait(250);

  TextOut(0,LCD_LINE7,"2");
  left_new();
  Wait(250);

  TextOut(0,LCD_LINE7,"3");
  left_new();
  Wait(250);

  TextOut(0,LCD_LINE7,"4");
  left_new();
  Wait(250);

  TextOut(0,LCD_LINE7,"5");
  left_new();
  Wait(250);

  forward();
  Wait(250);

  TextOut(0,LCD_LINE7,"1");
  left_new();
  Wait(250);

  TextOut(0,LCD_LINE7,"2");
  left_new();
  Wait(250);

  TextOut(0,LCD_LINE7,"3");
  left_new();
  Wait(250);

  TextOut(0,LCD_LINE7,"4");
  left_new();
  Wait(250);

  TextOut(0,LCD_LINE7,"5");
  left_new();
  Wait(250);

}


}
void eight()
{
    forward();
    Wait(500);
    left_new();
    Wait(500);
    forward();
    Wait(500);
    right_new();
    Wait(500);
    forward();
    Wait(500);
    right_new();
    Wait(500);
    forward();
    Wait(500);
    left_new();
    Wait(500);
    forward();
    Wait(500);
    left_new();
    Wait(500);
    forward();
    Wait(500);
    right_new();
    Wait(500);
    forward();
    Wait(500);
    right_new();
    Wait(500);
    forward();
    Wait(500);
    right_new();
    Wait(500);

}

void print_debug_info(bool debug)
{
    if(DEBUG)
    {
        TextOut(0,LCD_LINE1,"Right Input:");
        TextOut(0,LCD_LINE3,"Left Input:");
        TextOut(0,LCD_LINE6,"Right-Left:");

        NumOut(0,LCD_LINE2,sensor_right_input);
        NumOut(0,LCD_LINE4,sensor_left_input);
        NumOut(0,LCD_LINE7,sensor_diff);

        Wait(10);
        ClearScreen();
    }
}

bool forward()
{
    OnRev(MOTOR_LEFT,BASE_SPEED);
    OnRev(MOTOR_RIGHT,BASE_SPEED);

    Wait(300);

    sensor_line_input = GetInput(SENSOR_LINE,RawValueField);

    while(CROSS_THRESHOLD > sensor_line_input)
    {
        sensor_right_input = GetInput(SENSOR_RIGHT,RawValueField);
        sensor_left_input = GetInput(SENSOR_LEFT,RawValueField);
        sensor_line_input = GetInput(SENSOR_LINE,RawValueField);

        sensor_diff = sensor_right_input-sensor_left_input + 30;

        proportional = sensor_diff;
        derivative = sensor_diff-sensor_diff_last;
        integral += sensor_diff;

        if(integral > 20)
        {
            integral = 20;
        }

        if(integral < -20)
        {
            integral = -20;
        }

        corr_factor = proportional*KP+derivative*KD+integral*KI;

        if(corr_factor > 20)
        {
            corr_factor = 20;
        }

        if(corr_factor < -20)
        {
            corr_factor = -20;
        }

        OnRev(MOTOR_LEFT,BASE_SPEED-corr_factor);
        OnRev(MOTOR_RIGHT,BASE_SPEED+corr_factor);

        sensor_diff_last = sensor_diff;
        NumOut(0,LCD_LINE1,corr_factor);
    }

    OnRev(SENSOR_RIGHT,STOP); // Hammertime!
    OnRev(SENSOR_LEFT,STOP);

    return true;
}

bool left()
{
    sub_orientation();
    OnRev(MOTOR_LEFT,TURN_SPEED);
    OnRev(MOTOR_RIGHT,-TURN_SPEED);

    Wait(300);

    sensor_line_input = GetInput(SENSOR_LINE,RawValueField);

    while(sensor_line_input < CROSS_THRESHOLD )
    {
        sensor_line_input = GetInput(SENSOR_LINE,RawValueField);
        OnRev(MOTOR_LEFT,TURN_SPEED);
        OnRev(MOTOR_RIGHT,-TURN_SPEED);

        NumOut(0,LCD_LINE2,sensor_line_input);
    }

    OnRev(SENSOR_RIGHT,STOP); // Hammertime!
    OnRev(SENSOR_LEFT,STOP);

    return true;
}

bool left_new()
{
  sub_orientation();

  OnRev(MOTOR_LEFT,(TURN_SPEED));
  OnRev(MOTOR_RIGHT,-(TURN_SPEED));

  Wait(300);

  sensor_line_input = GetInput(SENSOR_LEFT, RawValueField);
  test = GetInput(SENSOR_RIGHT,RawValueField);

  while((sensor_line_input-test) < LEFT_LIMIT)
  {
    sensor_line_input = GetInput(SENSOR_LEFT,RawValueField);
    test = GetInput(SENSOR_RIGHT,RawValueField);

    OnRev(MOTOR_LEFT,(TURN_SPEED));
    OnRev(MOTOR_RIGHT,-(TURN_SPEED));

    NumOut(0,LCD_LINE2,sensor_line_input);
    NumOut(0,LCD_LINE3,test);
    NumOut(0,LCD_LINE4, test - sensor_line_input);
    NumOut(0,LCD_LINE5, sensor_line_input - test);
    TextOut(0,LCD_LINE6,"Left");

  } // Found black line


  OnRev(SENSOR_RIGHT,STOP); // Hammertime!
  OnRev(SENSOR_LEFT,STOP);

  sensor_line_input = GetInput(SENSOR_LEFT, RawValueField);
  test = GetInput(SENSOR_RIGHT,RawValueField);

 // if(!(sensor_line_input-test < 170 && sensor_line_input < 690) )
 // {
 //     TextOut(0,LCD_LINE8,"Erste");
 // }
 // else if (!(sensor_line_input > 690 ))
 // {
 //     TextOut(0,LCD_LINE8,"zwei");
 // }
 // else if(!(test  > 690))
 // {
 //    TextOut(0,LCD_LINE8,"dritte");
 // }

  NumOut(0,LCD_LINE2,sensor_line_input);
  NumOut(0,LCD_LINE3,test);
  NumOut(0,LCD_LINE4, test - sensor_line_input);
  NumOut(0,LCD_LINE5, sensor_line_input - test);
  TextOut(0,LCD_LINE6,"Left");

  sensor_line_input = 0;
  test = 0;
  return true;

}

bool right()
{
    add_orientation();
    OnRev(MOTOR_LEFT,-(TURN_SPEED));
    OnRev(MOTOR_RIGHT,(TURN_SPEED));

    Wait(300);

    sensor_line_input = GetInput(SENSOR_LINE,RawValueField);

    while(sensor_line_input < CROSS_THRESHOLD)
    {
        sensor_line_input = GetInput(SENSOR_LINE,RawValueField);
        OnRev(MOTOR_LEFT,-(TURN_SPEED));
        OnRev(MOTOR_RIGHT,(TURN_SPEED));


    }

    OnRev(SENSOR_RIGHT,STOP); // Hammertime!
    OnRev(SENSOR_LEFT,STOP);

    return true;
}

bool right_new()
{
  sub_orientation();

  OnRev(MOTOR_LEFT,-(TURN_SPEED));
  OnRev(MOTOR_RIGHT,(TURN_SPEED));

  Wait(300);

  sensor_line_input = GetInput(SENSOR_RIGHT, RawValueField);
  test = GetInput(SENSOR_LEFT,RawValueField);

  while((sensor_line_input-test) < RIGHT_LIMIT )
  {
    sensor_line_input = GetInput(SENSOR_RIGHT,RawValueField);
    test = GetInput(SENSOR_LEFT,RawValueField);

    OnRev(MOTOR_LEFT,-(TURN_SPEED));
    OnRev(MOTOR_RIGHT,(TURN_SPEED));

    NumOut(0,LCD_LINE2,sensor_line_input);
    NumOut(0,LCD_LINE3,test);
    NumOut(0,LCD_LINE4, test - sensor_line_input);
    NumOut(0,LCD_LINE5, sensor_line_input - test);
    TextOut(0,LCD_LINE6,"Right");

  } // Found black line
  sensor_line_input = 0;
  test = 0;

  OnRev(SENSOR_RIGHT,STOP); // Hammertime!
  OnRev(SENSOR_LEFT,STOP);

  return true;

}

bool down()
{
    left();
    left();
    forward();
}

void add_orientation()
{
    orientation++;
    if(orientation > 3)
    {
        orientation = 0;
    }
}

void sub_orientation()
{
    orientation--;
    if(orientation < 0)
    {
        orientation = 3;
    }
}
